package ex7_other;

import java.io.File;

/*
 * c:/widows폴더의 하위폴더의갯수와 파일의갯수,파일의 총 크기출력
 */
public class Exam1 {
	public static void main(String[] args) {
		File f = new File("c:/windows");
		String[] list = f.list();
		int dCount=0;
		int fCount=0;
		long fSize=0;
		for (String s : list) {
		
			System.out.println("name:"+s);
			File f2 = new File(f,s);//f의 하위폴더 s
			
			if(f2.isFile()) {
				System.out.printf("%s : 파일(%dbyte)\n",f2,f2.length());
				fCount++;
				fSize+=f2.length();
			}
			else {
				System.out.printf("%s : 폴더\n",f2.getAbsoluteFile());
				dCount++;
			}
			
		}System.out.println();
		System.out.println("폴더의 갯수 : "+dCount);
		System.out.println("파일의 갯수 : "+fCount);
		System.out.printf("파일의 총 크기 : %,d(byte)",fSize);
	
	}

}
package ex7_other;

import java.io.File;

/*
 * File클래스
 * -파일이나 폴더의 정보를 관리하는 클래스
 * -new File(String) : 경로
 * - new File(String,String) : 경로, 하위경로
 * -윈도우 : \\ , /
 * -리눅스 : /
 * 
 */
public class FileEx1 {
	public static void main(String[] args) {
		System.out.println("File.separator : "+File.separator);
		String filePath = "c:/";
		//f1 : c:/ 폴더의정보
		File f1 = new File(filePath);
		//f1.list() : 하위폴더/파일의 정보이름 리턴
		String[] files = f1.list();
		for (String f : files) {//f : c:/폴더의 하위목록의 이름
			System.out.println(f);
			File f2 = new File(filePath,f);//상위경로 , 하위경로
			if(f2.isDirectory()) {//폴더??
				System.out.printf("%s:디렉토리\n",f);
			}
			else {
				//f.length() 파일의 크기
				//%,d : 10진정수출력시 세자리마다 , 를 표시해 출력
				System.out.printf("%s:파일(%,dbytes)\n",f,f.length());
			}
		}
		
	}

}
package ex7_other;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.Period;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Calendar;
import java.util.Date;
import java.util.Formatter;

/*
 * File 클래스의 주요메서드
 * 1.getAbsolutePath() : 절대경로(전체경로)
 * 2.mkdir() : 하위폴더 1개 생성 ,폴더생성:true 리턴 실패 else
 * 3.mkdirs() : 여러개의 하위 폴더
 * 4 createNewFile() : 파일생성, 파일생성 성공:ture 리턴
 * 5.getName() : 파일의 이름
 * 6.length() : 파일의크기 (바이트)
 * 7.exists() : 존재여부판단 , 존재하면 true리턴 , 없는파일이면 false
 * 8.f2.renameTo(f3) : f2의 이름을 f3로 변경해라
 * 9.lastModified 
 * 
 * 
 */
public class FileEx2 {
	public static void main(String[] args) throws IOException {
		File f1 = new File("c:/temp1");
		System.out.printf("%s 폴더 생성 :%b\n",f1.getAbsolutePath(),f1.mkdir());
		File f2 = new File("c:/temp1/test.txt");
		System.out.printf("%s 파일생성:%b\n",f2.getAbsolutePath(),f2.createNewFile());
		System.out.printf("파일이름 : %s,파일크기 : %d\n",f2.getName(),f2.length());
		//폴더생성과 파일생성 까지만 가능 (내용 관련은 스트림이용)
		
		
		File f3 = new File("c:/temp1/test2.txt");
		if(f3.exists()) {
			System.out.println(f3.getName()+"파일 존재");
		}
		else {
			System.out.println(f3.getAbsolutePath()+"파일 존재하지않음");
		}
		System.out.printf("%s-->%s 이름변경 :%b\n",f2.getName(),f3.getName(),f2.renameTo(f3));
		//lastMoidfied() : 1970년이후부터 파일수정시간까지 밀리초로리턴
		System.out.println("파일의 최종수정시간 : "+f3.lastModified());
		//파일의최종수정시간 : 년월일 시분초로출력해보자
		String last = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date(f3.lastModified()));
			//new Data(lastMoidfied): lastMoidfied에 해당하는 일 시로 만들어줌
		System.out.println("파일의 최종수정시간 : "+last);
		
		//LocalDateTime을 이용한방법
		LocalDateTime ldt = Instant.ofEpochMilli(f3.lastModified()).atZone(ZoneId.systemDefault())
		.toLocalDateTime();
		DateTimeFormatter pattern = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
		System.out.println("파일의 최종수정시간(LocalDatetime) : "+ldt.format(pattern));
		
		System.out.printf("%s 파일삭제 : %b\n ",f3.getName(),f3.delete());
		
	}

}
package ex7_other;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class FileEx3 {
	public static void main(String[] args) throws IOException {
		File f = new File("data.txt");
		if(!f.exists()) {
			System.out.println(f.getName()+"파일 존재X");
//			FileOutputStream fos = new FileOutputStream(f);
//			byte[] buf ="안녕하세요".getBytes();
//			fos.write(buf);
//			fos.flush();
//			fos.close();
			return;
		}
		FileInputStream fis = new FileInputStream(f);
		int len=0;
		byte[] buf = new byte[fis.available()];
		while((len=fis.read(buf))!= -1) {
			System.out.println(new String(buf,0,len));
		}
		fis.close();
		f.delete();
	}

}
package ex7_other;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.util.Vector;

/*
 * SequenceStream 
 *  -여러개의 스트림을 하나의 스트림으로 합 해주는 스트림
 */
public class SequenceStreamEx1 {
	public static void main(String[] args) throws IOException {
		File f = new File("src/ex7_other");
		String[] files = f.list();
		Vector<InputStream> v = new Vector<InputStream>();
		for(String file : files) {
			File f2 = new File(f,file);
			if(f2.isFile()) {
				v.add(new FileInputStream(f2));//f2파일을 vector에 저장
				}
			
		}
		System.out.println(v.elements());
		SequenceInputStream s =  new SequenceInputStream(v.elements());
		FileOutputStream fos = new FileOutputStream("file예제.txt");
		int data = 0;
		byte[] buf = new byte[s.available()];
		while((data=s.read(buf))!= -1) {
			fos.write(buf,0,data);
		}
		fos.flush();
		fos.close();
		s.close();
	}

}
